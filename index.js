/*
Events
https://docs.netlify.com/integrations/build-plugins/create-plugins/

onPreBuild: runs before the build command is executed.

onBuild: runs directly after the build command is executed and before Functions bundling.

onPostBuild: runs after the build command completes; after onBuild tasks and Functions bundling are executed; and before the deploy stage. Can be used to prevent a build from being deployed.

onError: runs when an error occurs in the build or deploy stage, failing the build. Canâ€™t be used to prevent a build from being deployed.

onSuccess: runs when the deploy succeeds. Canâ€™t be used to prevent a build from being deployed.

onEnd: runs after completion of the deploy stage, regardless of build error or success; is useful for resources cleanup. Canâ€™t be used to prevent a build from being deployed.
*/

import fs from 'fs';
import { execSync } from 'child_process';
import axios from 'axios';
import FormData from 'form-data';

// export const onPreBuild = function() {
//   console.log("[21YB] from onPreBuild event!");
// }

// export const onBuild = function() {
//   console.log("[21YB] from onBuild event!");
// }

// export const onPostBuild = function() {
//   console.log("[21YB] from onPostBuild event!");
// }

// export const onError = function() {
//   console.log("[21YB] from onError event!");
// }

const runCmd = function(cmd){
  execSync(cmd, (error, stdout, stderr) => {
    if (error) {
        console.log(`error: ${error.message}`);
        return;
    }
    if (stderr) {
        console.log(`stderr: ${stderr}`);
        return;
    }
    console.log(`stdout: ${stdout}`);
  });
}

const genfn = function (length) {
  var result           = '';
  var characters       = 'abcdefghijklmnopqrstuvwxyz0123456789';
  var charactersLength = characters.length;
  for ( var i = 0; i < length; i++ ) {
    result += characters.charAt(Math.floor(Math.random() * charactersLength));
  }
 return result;
}

export const onSuccess = async function({ constants, inputs, utils }) {
  if(!('YB_NETLIFY_INTEGRATION_TOKEN' in process.env)){

    utils.status.show({
      title: "Missing 21YunBox Netlify Integration Token",
      summary: "Get a 21YunBox account to proceed with your in-China deployment.",
    });

    console.log(`
  It looks like you don't have a 21YunBox account yetðŸ˜¢. \n

  You can get your account at: https://dashboard.21cloudbox.com/get-started/.\n

  Once you have an account, you get an integration token under:\n
  "New" > "Integration" > "Netlify."\n

  If you face any problems, feel free to contact us at hello@21yunbox.com.\n

  Good luck! ðŸ˜‰\n
    `);
    
    utils.build.failPlugin("Get a 21YunBox account to proceed with your in-China deployment.");
  }

  // https://docs.netlify.com/integrations/build-plugins/create-plugins/#constants
  // PUBLISH_DIR: directory that contains the deploy-ready HTML files and assets generated by the build. Its value is always defined, but the target might not have been created yet.
  console.log(`The directory contains the deploy-ready HTML files and assets "${constants.PUBLISH_DIR}"`)

  // list all files in that doc
  // fs.readdir(constants.PUBLISH_DIR, (err, files) => {
  //   files.forEach(file => {
  //     console.log(`\t* ${file}`);
  //   });
  // });

  // tar/gzip the publish folder
  var cmd = `tar -czf /tmp/site.tar.gz ${constants.PUBLISH_DIR}`
  console.log(`Compressing the site at directory "${constants.PUBLISH_DIR}"`);
  runCmd(cmd);

  // tmp: make the site downloadable
  // var cmd = `cp /tmp/site.tar.gz ${constants.PUBLISH_DIR}`
  // runCmd(cmd);

  // list all files in /tmp/ to see if the site has created
  // console.log("Listing directory /tmp/:");
  // fs.readdir('/tmp/', (err, files) => {
  //   files.forEach(file => {
  //     console.log(`\t* ${file}`);
  //   });
  // });

  const sitefn = genfn(10);

  const YB_UPLOAD_TOKEN_ENDPOINT = 'https://dashboard.21cloudbox.com/api/netlify-upload-token/';
  const YB_ACCESS_TOKEN = process.env.YB_NETLIFY_INTEGRATION_TOKEN;
  await axios.post(
    YB_UPLOAD_TOKEN_ENDPOINT, 
    { 'netlify_21yb_integration_token': YB_ACCESS_TOKEN },
    { headers: {'Content-Type': 'application/json'} }
  ).then(async ({data}) => {
    console.log(' ** RES:');
    console.log(data);

    console.log('  ** UPLOADING...');
    const UPLOAD_ENDPOINT = 'https://21yb-edge-processing.oss-cn-shanghai.aliyuncs.com';

    const formData = new FormData();
    formData.append('key',`netlify/site-${sitefn}.tar.gz`);
    formData.append('OSSAccessKeyId', data['results']['accessid']);
    formData.append('policy', data['results']['policy']);
    formData.append('signature', data['results']['signature']);
    formData.append('success_action_status','200');
    formData.append('callback', data['results']['callback']);
    formData.append('x:site_id', process.env.SITE_ID);
    formData.append('x:deploy_id', process.env.DEPLOY_ID);
    formData.append('file',fs.createReadStream('/tmp/site.tar.gz'));

    await axios({
        method: 'post',
        url: UPLOAD_ENDPOINT,
        data: formData,
        maxContentLength: Infinity,
        maxBodyLength: Infinity,
        headers: {'Content-Type': 'multipart/form-data;boundary=' + formData.getBoundary()}
    }).catch(function (error) {
        console.log(error.toJSON());
    }).then(function (response) {
    // doc: https://github.com/axios/axios#response-schema
    // console.log(response.data);
    // console.log(response.status);
    // console.log(response.statusText);
    // console.log(response.headers);
    // console.log(response.config);
      if(response.status == 200){
        console.log('  ** UPLOAD SUCCEED');
      }else{
        console.log('  ** FAILED TO UPLOAD');
        utils.build.failPlugin("FAILED TO UPLOAD.");
      }
      // console.log(response.data);
    });

  });

}

// export const onEnd = function() {
//   console.log("[21YB] from onEnd event!");
// }